#! /usr/bin/env bash

# TODO: allow user to set creation location
# TODO: allow user to set project name
HERE="$(pwd)"
NAME="$(/usr/bin/basename $HERE)"
ORG=$( echo `basename "$0"` | cut -d'-' -f1 )

# Poirot pattern location
PATTERNS="https://raw.githubusercontent.com/DCgov/poirot-patterns/master/default.txt"
# Two other patterns that can be searched by Poirot
# https://raw.githubusercontent.com/DCgov/poirot-patterns/master/financial.txt
# https://raw.githubusercontent.com/DCgov/poirot-patterns/master/ids.txt

# Check installations
# TODO: check these during Makefile installation
type git >/dev/null 2>&1 || {
  echo "|| ERROR: git not found:"
  echo "|| please install git"
  exit 1
}

type about_yml_generate >/dev/null 2>&1 || {
  echo "|| ERROR: about_yml_generate not found:"
  echo "|| gem install about_yml should do the trick"
  exit 1
}

type poirot >/dev/null 2>&1 || {
  echo "|| ERROR: poirot not found:"
  echo "|| pip install poirot should do the trick"
}

usage(){
  echo -e "\nUsage:\n $ORG init [options]\n"
  echo "  Options:"
  echo "  -d, --dir     Repository location (defaults to current directory)"
  echo "  -h, --help    Display this help message"
  echo "  -n, --name    Project name (defaults to current directory name)"
  echo ""
}

# Convert known long options to short options
for arg in "$@"; do
  shift
  case "$arg" in
    --dir)
      set -- "$@" "-d"
      ;;
    --help)
      set -- "$@" "-h"
      ;;
    --name)
      set -- "$@" "-n"
      ;;
    --quiet)
      set -- "$@" "-q"
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

# Reset to beginning of arguments
OPTIND=1

# Process option flags
while getopts "d:hqn:" opt; do
  case $opt in
    d )
      HERE="$OPTARG"
      ;;
    h )
      usage
      exit 0
      ;;
    n )
      NAME="$OPTARG"
      ;;
    q )
      exec 1>/dev/null 2>/dev/null
      ;;
    \? )
      echo "Unrecognized option: -$OPTARG\n"
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# Create project directory, if doesn't already exist, and move there
mkdir -p "$HERE"
cd "$HERE"

# Initialize git repo in this directory
git init >/dev/null

# Grab LICENSE.md and CONTRIBUTING.md
echo "|| Getting LICENSE.md and CONTRIBUTING.md"
curl -sO https://raw.githubusercontent.com/18F/open-source-policy/master/LICENSE.md
curl -sO https://raw.githubusercontent.com/18F/open-source-policy/master/CONTRIBUTING.md

# Create README.md
echo "|| Creating README.md"
echo -e "# $NAME\n\n### Public domain\n\nThis project is in the worldwide [public domain](LICENSE.md). \
As stated in [CONTRIBUTING](CONTRIBUTING.md):\n\n> This project is in the public domain within \
the United States, and copyright and related rights in the work worldwide are waived through \
the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/).\
\n>\n> All contributions to this project will be released under the CC0 dedication. By submitting a \
pull request, you are agreeing to comply with this waiver of copyright interest." > README.md

# Establish git branches
echo "|| Creating a develop branch for git flow"
git checkout -b develop >/dev/null 2>&1

# Create initial .about.yml
if [[ ! -e .about.yml ]]; then
  echo "|| Initializing .about.yml"
  about_yml_generate > .about.yml
fi

# Install git hooks
if [[ ! -e .git/hooks/pre-commit ]]; then
  echo "|| Creating empty pre-commit git hook"
  touch .git/hooks/pre-commit
fi

if grep -q "poirot" .git/hooks/pre-commit; then
  :
else
  echo "|| Adding Poirot to git hooks"
  curl --silent https://raw.githubusercontent.com/DCgov/poirot/master/pre-commit-poirot -o .git/hooks/pre-commit-poirot
  echo '.git/hooks/pre-commit-poirot -f "" -p "${PATTERNS}"' >> .git/hooks/pre-commit
  chmod +x .git/hooks/pre-commit .git/hooks/pre-commit-poirot
fi
# about_yml_validate
# linter(s)

# Create system-security-plan.yml
# Optional

# Create initial CI metadata
# Perhaps optional? Or with user input?

# Set Python/Ruby/Node version?
