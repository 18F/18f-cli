#! /usr/bin/env bash

type cf >/dev/null 2>&1 || {
  echo "|| ERROR: cf not found:"
  echo "|| please install cf"
  exit 1
}

API="https://api.cloud.gov"

# Check whether logged in
if cf target | grep "Not logged in"; then
  echo "|| Not logged into cf"
  if [[ $CF_USERNAME && $CF_PASSWORD ]]; then
    # Log in to the sandbox to avoid the org/space selection prompt
    cf login -a $API -u $CF_USERNAME -p $CF_PASSWORD -o sandbox
  else
    cf login
  fi
fi

usage(){
  echo -e "\nUsage:\n  $( echo `basename "$0"` | cut -d'-' -f1 ) deploy [options] <arg>\n"
  echo "Passing 'production' as the argument will look for manifest.yml in the current directory,"
  echo "and push if it is found. Passing any other string will look for manifest-yourstring.yml and"
  echo -e "use that file instead.\n"
  echo "  Options:"
  echo "  -h, --help               Display this help message"
  echo "  -t, --timid              Confirm org and space settings before pushing"
  echo "  -d, --some-downtime      Perform a some-downtime deploy (default: zero-downtime)"
	echo ""
}

get_org(){
  CF_APP_DATA=$(cf curl "/v2/apps" -X GET -H "Content-Type: application/x-www-form-urlencoded" | jq '.resources[] | select(.entity.name == "'${NAME}'")')
  SPACE_URL=$(echo $CF_APP_DATA | jq '.entity.space_url' | tr -d '"')
  CF_SPACE_DATA=$(cf curl "${SPACE_URL}" -X GET -H "Content-Type: application/x-www-form-urlencoded")
  CF_SPACE=$(echo $CF_SPACE_DATA | jq '.entity.name' | tr -d '"')
  ORG_URL=$(echo $CF_SPACE_DATA | jq '.entity.organization_url' | tr -d '"')
  CF_ORG=$(cf curl ${ORG_URL} -X GET -H "Content-Type: application/x-www-form-urlencoded" | jq '.entity.name'  | tr -d '"')
}

if [ $# -ne 1 ]; then
  usage
  exit 0
fi

# Convert known long options to short options
for arg in "$@"; do
  shift
  case "$arg" in
    --help)
      set -- "$@" "-h"
      ;;
    --some-downtime)
      # Why this option? It may be useful for projects that don't want to allocate
      # the memory to run two apps, as required for zero-downtime deploys
      set == "$@" "-d"
      ;;
    --timid)
      set == "$@" "-t"
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

# Reset to beginning of arguments
OPTIND=1

# Process option flags
while getopts "hdt" opt; do
  case $opt in
    h )
      usage
      exit 0
      ;;
    t )
      TIMID=true
      echo "hello"
      ;;
    d )
      DOWNTIME=true
      ;;
  esac
done
shift $((OPTIND -1))

# Gather information from manifest and CF API
if [[ $1 = "production" ]]; then
  NAME=$(cat manifest.yml | grep name | cut -d':' -f2 | tr -d ' ')
  get_org
  MANIFEST="manifest.yml"
elif [[ $1 = "staging" ]]; then
  NAME=$(cat manifest-staging.yml | grep name | cut -d':' -f2 | tr -d ' ')
  get_org
  MANIFEST="manifest-staging.yml"
elif [[ -e manifest-${1}.yml ]]; then
  NAME=$(cat manifest-${1}.yml | grep name | cut -d':' -f2 | tr -d ' ')
  get_org
  MANIFEST="manifest-${1}.yml"
else
  echo -e "Error: can't locate manifest-${1}.yml\n"
  usage
  exit
fi

# Point to the appropriate CF org and space
if [[ $TIMID ]]; then
  echo -n "Pushing to org ${CF_ORG} and space ${CF_SPACE}. Is that correct? [y/n] "
  read response
  if [[ $response =~ y(es)? ]]; then
    cf target -o $CF_ORG -s $CF_SPACE
  else
    exit 0
  fi
else
  cf target -o $CF_ORG -s $CF_SPACE > /dev/null 2>&1
fi

# Check that no user-set environment variables will get lost in a zero-downtime deploy.
# Since zero-downtime works by creating a new instance and then switching to it, environment
# variables only persist if they are set by a User-Provided Service.
if [[ $(echo $CF_APP_DATA | jq '.entity.environment_json | length') > 0 ]] && [[ ! $DOWNTIME ]]; then
  echo "The following environment variables will be lost! "
  echo $CF_APP_DATA | jq '.entity.environment_json | keys[]'
  echo -en "To keep them, set up a User-Provided Service and bind it to the app:\n http://docs.cloudfoundry.org/devguide/services/user-provided.html\nStill proceed with push? [y/n] "
  read response
  if [[ $response =~ y(es)? ]]; then
    :
  else
    exit 0
  fi
fi

# Push the app
if [[ ! $DOWNTIME ]]; then
  # cf zero-downtime-push $NAME -f $MANIFEST
  echo "FAKE PUSH"
else
  # cf push -f $MANIFEST
  echo "FAKE DOWN PUSH"
fi
