#! /usr/bin/env bash

type cf >/dev/null 2>&1 || {
  echo " ERROR: cf not found:"
  echo " please install cf"
  exit 1
}

usage(){
  echo -e "\nUsage:\n  18f deploy [options] <app name>\n"
  echo "  Options:"
  echo "  -h, --help               Display this help message"
  echo "  -t, --timid              Confirm org and space settings before pushing"
  echo "  -f, --force              Skip check for environment variables set outside of a UPS"
  echo "  -d, --some-downtime      Perform a some-downtime deploy (default: zero-downtime)"
  echo "  -m, --manifest           Specify a local manifest.yml instead of building from the app"
  echo ""
  echo "  If the app name is not unique:"
  echo "  -o, --org                The organization to target"
  echo "  -s, --space              The space in the organization to target"
	echo ""
}

API="https://api.cloud.gov"

# Check whether logged in
CURRENT_TARGET=$(cf target)
if echo $CURRENT_TARGET | grep -q "Not logged in"; then
  echo " Not logged into cf"
  if [[ $CF_USERNAME && $CF_PASSWORD ]]; then
    # Log in to the sandbox to avoid the org/space selection prompt
    # The script will target the correct org/space in a few lines
    cf login -a $API -u $CF_USERNAME -p $CF_PASSWORD -o sandbox
  else
    cf login
  fi
else
  OLD_ORG=$(echo $CURRENT_TARGET | cut -d' ' -f10)
  OLD_SPACE=$(echo $CURRENT_TARGET | cut -d' ' -f12)
fi

#TODO: consider using a single case statement, which would allow the argument to precede
# the option flags

# Convert known long options to short options
for arg in "$@"; do
  shift
  case "$arg" in
    --help)
      set -- "$@" "-h"
      ;;
    --some-downtime)
      # Why this option? It may be useful for projects that don't want to allocate
      # the memory to run two apps, as required for zero-downtime deploys
      set -- "$@" "-d"
      ;;
    --timid)
      set -- "$@" "-t"
      ;;
    --force)
      set -- "$@" "-f"
      ;;
    --manifest)
      set -- "$@" "-m"
      ;;
    --org)
      set -- "$@" "-o"
      ;;
    --space)
      set -- "$@" "-s"
      ;;
    *)
      set -- "$@" "$arg"
      ;;
  esac
done

# Reset to beginning of arguments
OPTIND=1

# Process option flags
while getopts "hdtmo:s:" opt; do
  case $opt in
    h )
      usage
      exit 0
      ;;
    t )
      TIMID=true
      ;;
    d )
      DOWNTIME=true
      ;;
    f )
      FORCE=true
      ;;
    m )
      MANIFEST=$OPTARG
      MANUAL=true
      ;;
    o )
      CF_ORG=$OPTARG
      ;;
    s )
      CF_SPACE=$OPTARG
      ;;
  esac
done
shift $((OPTIND -1))

# Check whether autopilot is installed for zero-downtime deploys
if [[ ! $DOWNTIME ]]; then
  if cf plugins | grep -q "autopilot"; then
    :
  else
    echo "Install autopilot to use zero-downtime deploys. For installation instructions, see:"
    echo "https://github.com/concourse/autopilot#installation"
  fi
fi

if [ $# -ne 1 ]; then
  echo "Error: please supply the app name"
  usage
  exit 0
fi

NAME=$1
echo "Looking for the right org and space to push to"
#TODO: catch multiple apps with the same name and prompt for more info
if [[ ! $CF_SPACE ]]; then
  CF_APP_DATA=$(cf curl "/v2/apps" -X GET -H "Content-Type: application/x-www-form-urlencoded" | jq '.resources[] | select(.entity.name == "'${NAME}'")')
  if [[ $(echo $CF_APP_DATA | wc -w) -gt 1 ]]; then
    echo "You have access to multiple apps with that name! Ensure that the app names are unique and try again"
    exit 1
  fi
  SPACE_URL=$(echo $CF_APP_DATA | jq '.entity.space_url' | tr -d '"')
  if [[ $SPACE_URL == "null" ]]; then
    echo "No app named ${NAME} found! Check the application name and try again"
    exit 1
  fi
  CF_SPACE_DATA=$(cf curl "${SPACE_URL}" -X GET -H "Content-Type: application/x-www-form-urlencoded")
  CF_SPACE=$(echo $CF_SPACE_DATA | jq '.entity.name' | tr -d '"')
fi
if [[ $CF_SPACE ]] && [[ ! $CF_ORG ]]; then
  ORG_URL=$(echo $CF_SPACE_DATA | jq '.entity.organization_url' | tr -d '"')
  CF_ORG=$(cf curl ${ORG_URL} -X GET -H "Content-Type: application/x-www-form-urlencoded" | jq '.entity.name'  | tr -d '"')
fi
echo "Using space $CF_SPACE in org $CF_ORG"

# Point to the appropriate CF org and space
if [[ $TIMID ]]; then
  echo -n "Pushing to org ${CF_ORG} and space ${CF_SPACE}. Is that correct? [y/n] "
  read response
  if [[ $response =~ y(es)? ]]; then
    echo "Targeting space $CF_SPACE in org $CF_ORG"
    cf target -o $CF_ORG -s $CF_SPACE > /dev/null
  else
    exit 0
  fi
else
  echo "Targeting space $CF_SPACE in org $CF_ORG"
  cf target -o $CF_ORG -s $CF_SPACE > /dev/null 2>&1
fi

if [[ ! $MANIFEST ]]; then

  #TODO: get app name, maybe from original manifest.yml?
  #TODO: figure out the right space and org
  echo "Creating an app manifest"
  cf create-app-manifest $NAME -p 18f-deploy.yml > /dev/null
  MANIFEST="18f-deploy.yml"

  #TODO: create flags for these options
  SHORTEN_VCAP=${SHORTEN_VCAP:-"false"}
  UPPERCASE=${UPPERCASE:-"true"}

  # Add user-provided variables as entries in yml env
  echo "Gathering env vars from user-provided services"
  VCAP_SERVICES=$(cf env $NAME | tr -d "\n" | awk -F"System-Provided:" '{$0=$2}1' | awk -F"{ \"VCAP_APPLICATION" '{$0=$1}1' | jq '.["VCAP_SERVICES"]')
  # Find the number of user-provided services
  LENGTH=$(echo $VCAP_SERVICES | jq '.["user-provided"] | length')
  echo "Found $LENGTH services"
  if [[ $LENGTH -gt 0 ]]; then
    LENGTH=$(($LENGTH - 1))

    for n in $(seq 0 $LENGTH); do
      # The name of the service is nested in VCAP_SERVICES, so pull that out
      SERVICE=$(echo $VCAP_SERVICES | jq -r --argjson n $n '.["user-provided"][$n]["name"]')
      echo "Getting settings for $SERVICE"

      # Find out how many keys are in this service
      KEYS_LENGTH=$(echo $VCAP_SERVICES | jq -r --argjson n $n '.["user-provided"][$n]["credentials"] | keys | length')

      # Get each key-value pair and create an export statement
      KEYS_LENGTH=$(($KEYS_LENGTH - 1))
      for i in $(seq 0 $KEYS_LENGTH); do
        KEY="$(echo $VCAP_SERVICES | jq -r --argjson n $n --argjson i $i '.["user-provided"][$n]["credentials"] | keys[$i]')"
        VALUE="$(echo $VCAP_SERVICES | jq -r --argjson n $n --arg key $KEY '.["user-provided"][$n]["credentials"][$key]')"

        if [[ "$UPPERCASE" == "true" ]]; then
          # Convert KEY and SERVICE to uppercase
          KEY=${KEY^^}
          SERVICE=${SERVICE^^}
        fi

        echo $SERVICE $KEY $VALUE
        # Create export statements
        if [[ "$SHORTEN_VCAP" == "true" ]]; then
          ENV_VAR="${KEY}=\: ${VALUE}"
        else
          # Dashes cause failures for bash variables, so convert them
          ENV_VAR="${SERVICE//-/_}_${KEY}: ${VALUE}"
        fi
        if cat 18f-deploy.yml | grep "env:" > /dev/null; then # If the "env" key already exists
          sed -i '' "s/env:/env:\\`echo -e '\n\r'`    ${ENV_VAR}/" 18f-deploy.yml
        else # Create the "env" key if there is none
          echo "env:\n${ENV_VAR}" >> 18f-deploy.yml
        fi
      done
    done
    # for n in $(seq 0 $LENGTH); do
    #   # The name of the service is nested in VCAP_SERVICES, so pull that out
    #   SERVICE=$(echo $VCAP_SERVICES | jq -r --argjson n $n '.["user-provided"][$n]["name"]')
    #   echo "Getting settings for $SERVICE"
    #
    #   # Create arrays for keys and values
    #   # There may be a cleaner way to do this, but it works
    #   KEYS=($(echo $VCAP_SERVICES | jq -r --argjson n $n '.["user-provided"][$n]["credentials"] | keys[]'))
    #   VALUES=($(echo $VCAP_SERVICES | jq -r --argjson n $n '.["user-provided"][$n]["credentials"][]'))
    #
    #   if [[ "$UPPERCASE" == "true" ]]; then
    #     # Convert all elements of KEYS array to uppercase
    #     KEYS=( ${KEYS[@]^^} )
    #     # SERVICE is not an array, so it can just be converted directly
    #     SERVICE=${SERVICE^^}
    #   fi
    #
    #   # Loop through the arrays in parallel and create export statements
    #   COUNTER=0
    #   while [ $COUNTER -lt  ${#KEYS[@]} ]; do
    #     # shopt -s nocasematch # So that users can set true, True, or TRUE
    #     if [[ "$SHORTEN_VCAP" == "true" ]]; then
    #       ENV_VAR="${KEYS[$COUNTER]}=\: ${VALUES[$COUNTER]}"
    #     else
    #       # Dashes cause failures for bash variables, so convert them
    #       ENV_VAR="${SERVICE//-/_}_${KEYS[$COUNTER]}: ${VALUES[$COUNTER]}"
    #     fi
    #     if cat 18f-deploy.yml | grep "env:" > /dev/null; then # If the "env" key already exists
    #       sed -i '' "s/env:/env:\\`echo -e '\n\r'`    ${ENV_VAR}/" 18f-deploy.yml
    #     else # Create the "env" key if there is none
    #       echo "env:\n${ENV_VAR}" >> 18f-deploy.yml
    #     fi
    #     let COUNTER=COUNTER+1
    #   done
    # done
  fi
fi

# Check that no user-set environment variables will get lost in a zero-downtime deploy.
# Since zero-downtime works by creating a new instance and then switching to it, environment
# variables only persist if they are set by a User-Provided Service.
if [[ $(echo $CF_APP_DATA | jq --raw-output '.entity.environment_json | length') -gt 0 ]] && [[ ! $DOWNTIME ]] && [[ ! $FORCE ]]; then
  echo ""
  if [[ $MANUAL ]]; then
    echo "The following environment variables will be lost! "
    echo $CF_APP_DATA | jq '.entity.environment_json | keys[]'
    echo -en "To keep them, set up a User-Provided Service and bind it to the app:\n http://docs.cloudfoundry.org/devguide/services/user-provided.html\nStill proceed with push? [y/n] "
    read response
    if [[ $response =~ y(es)? ]]; then
      :
    else
      exit 0
    fi
  else
    echo "WARNING: The following environment variables are set manually!"
    echo $CF_APP_DATA | jq '.entity.environment_json | keys[]'
    echo "It's recommended set up a User-Provided Service and bind it to the app:"
    echo "http://docs.cloudfoundry.org/devguide/services/user-provided.html"
    echo "This will ensure that the variables aren't lost during a zero-downtime push"
  fi
fi

LATEST_COMMIT=$(find . -name latest-commit.txt)

if [[ -n $LATEST_COMMIT ]]; then
  git rev-parse --abbrev-ref HEAD > $LATEST_COMMIT
  git rev-parse HEAD >> $LATEST_COMMIT
fi

# Push the app
if [[ ! $DOWNTIME ]]; then
  cf zero-downtime-push $NAME -f $MANIFEST
else
  cf push -f $MANIFEST
fi

# Return to the previous state, if applicable
if [[ -n $OLD_ORG ]] && [[ -n $OLD_SPACE ]]; then
  echo "Returning to space $CF_SPACE in org $CF_ORG"
  cf target -o $OLD_ORG -s $OLD_SPACE > /dev/null 2>&1
fi

# Clean up
rm 18f-deploy.yml
